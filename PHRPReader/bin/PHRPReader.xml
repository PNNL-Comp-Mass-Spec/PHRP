<?xml version="1.0"?>
<doc>
<assembly>
<name>
PHRPReader
</name>
</assembly>
<members>
<member name="M:PHRPReader.clsPeptideMassCalculator.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String)">
	<summary>
 Compute the mass of peptide sequence strSequence.  If modification symbols are present, returns -1
 </summary>
	<param name="strSequence"></param>
	<returns></returns>
	<remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ComputeSequenceMass(System.String,System.Int32,PHRPReader.clsPeptideMassCalculator.udtPeptideSequenceModInfoType[]@)">
	<summary>
 Compute the mass of peptide sequence strSequence; uses the information in udtResidueModificationInfo() to determine modification masses
 </summary>
	<param name="strSequence"></param>
	<returns></returns>
	<remarks>Looks for and removes prefix and suffix letters if .RemovePrefixAndSuffixIfPresent = True</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ConvoluteMass(System.Double,System.Int32,System.Int32)">
	<summary>
 Converts the m/z value from one charge state to another charge state.  Either charge state can be 0, which means an uncharged peptide
 </summary>
	<param name="dblMassMZ"></param>
	<param name="intCurrentCharge"></param>
	<param name="intDesiredCharge"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidAtomCounts(System.Char)">
	<summary>
 Returns a structure with the number of atoms of C, H, N, O, and S in the specified amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.GetAminoAcidMass(System.Char)">
	<summary>
 Returns the mass of the specified amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MassToPPM(System.Double,System.Double)">
	<summary>
 Converts dblMassToConvert to ppm, based on the value of dblCurrentMZ
 </summary>
	<param name="dblMassToConvert"></param>
	<param name="dblCurrentMZ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MHToMonoisotopicMass(System.Double)">
	<summary>
 Converts and MH mass to the uncharged (neutral) mass
 </summary>
	<param name="dblMH"></param>
	<returns></returns>
	<remarks>Equivalent to ConvoluteMass(dblMH, 1, 0)</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.MonoisotopicMassToMZ(System.Double,System.Int32)">
	<summary>
 Converts an uncharged (neutral) mass to the m/z value for the specified charge
 </summary>
	<param name="dblMonoisotopicMass"></param>
	<param name="intDesiredCharge"></param>
	<returns></returns>
	<remarks>Equivalent to ConvoluteMass(dblMonoisotopicMass, 0, intDesiredCharge)</remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.PPMToMass(System.Double,System.Double)">
	<summary>
 Converts from a ppm value to a mass value, using the specified m/z as a reference point
 </summary>
	<param name="dblPPMToConvert"></param>
	<param name="dblCurrentMZ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.ResetTerminusMasses">
	<summary>
 Reset the N and C terminus default mass values
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidAtomCounts(System.Char,PHRPReader.clsPeptideMassCalculator.udtAtomCountsType)">
	<summary>
 Defines the number of C, H, N, O, and S atoms in an amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<param name="udtAtomCounts"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideMassCalculator.SetAminoAcidMass(System.Char,System.Double)">
	<summary>
 Defines a custom mass for an amino acid
 </summary>
	<param name="chAminoAcidSymbol"></param>
	<param name="dblMass"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.#ctor">
	<summary>
 Constructor; auto-calls Clear()
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.AddProtein(System.String)">
	<summary>
 Add a new protein to associate with this peptide
 </summary>
	<param name="strProteinName"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.Clear">
	<summary>
 Reset the peptide to default values (and empty strings)
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.Clone">
	<summary>
 Duplicate this PSM object and return a new one
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScore(System.String)">
	<summary>
 Returns the value stored for the specified score
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise an empty string</returns>
</member><member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String)">
	<summary>
  Returns the value stored for the specified score (as a double)
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise 0</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreDbl(System.String,System.Double)">
	<summary>
  Returns the value stored for the specified score (as a double)
 </summary>
	<param name="strScoreName">Score name</param>
	<param name="dblValueIfMissing">Value to return if the score is not defined</param>
	<returns>Score if defined, otherwise dblValueIfMissing</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreInt(System.String)">
	<summary>
  Returns the value stored for the specified score (as an integer)
 </summary>
	<param name="strScoreName">Score name</param>
	<returns>Score if defined, otherwise 0</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.GetScoreInt(System.String,System.Int32)">
	<summary>
  Returns the value stored for the specified score (as an integer)
 </summary>
	<param name="strScoreName">Score name</param>
	<param name="intValueIfMissing">Value to return if the score is not defined</param>
	<returns>Score if defined, otherwise intValueIfMissing</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.SetPeptide(System.String)">
	<summary>
 Update the peptide sequence (auto-determines the clean sequence)
 </summary>
	<param name="strPeptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
	<remarks>Does not update the cleavage state info</remarks>
</member><member name="M:PHRPReader.clsPSM.SetPeptide(System.String,PHRPReader.clsPeptideCleavageStateCalculator)">
	<summary>
 Update the peptide sequence (auto-determines the clean sequence); also auto-update the the cleavage state info
 </summary>
	<param name="strPeptide">Peptide sequence (can optionally contain modification symbols; can optionally contain prefix and suffix residues)</param>
	<param name="objCleavageStateCalculator">Cleavage state calculator object</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.SetScore(System.String,System.String)">
	<summary>
 Add/update an additional score to associate with this peptide
 </summary>
	<param name="strScoreName"></param>
	<param name="strScoreValue"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPSM.UpdateCleavageInfo(PHRPReader.clsPeptideCleavageStateCalculator)">
	<summary>
 Auto-determine the number of missed cleavages, cleavage state, and number of tryptic terminii based on the peptide sequence
 </summary>
	<param name="objCleavageStateCalculator"></param>
	<remarks></remarks>
</member><member name="P:PHRPReader.clsPHRPReader.CanRead">
	<summary>
 Returns True if the input file was successfully opened and data remains to be read
 </summary>
	<value></value>
	<returns>True if the file is readable</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<remarks>Sets LoadModDefs to True and LoadMSGFResults to true</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="eResultType">Source file PeptideHit result type</param>
	<remarks>Sets LoadModDefs to True and LoadMSGFResults to true</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,System.Boolean,System.Boolean)">
	<summary>
 Constructor that auto-determines the PeptideHit result type based on the filename
 </summary>
	<param name="strInputFilePath">Input file to read</param>
	<param name="blnLoadModDefs">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.#ctor(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType,System.Boolean,System.Boolean)">
	<summary>
 Constructor where the PeptideHit result type is explicitly set
 </summary>
	<param name="strInputFilePath">Input file to read</param>
 ''' <param name="eResultType">Source file PeptideHit result type</param>
	<param name="blnLoadModDefs">If True, then looks for and auto-loads the modification definitions from the _moddefs.txt file</param>
	<param name="blnLoadMSGFResults">If True, then looks for and auto-loads the MSGF results from the _msg.txt file</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String)">
	<summary>
 Auto-determine the dataset name using the input file path
 </summary>
	<param name="strFilePath"></param>
	<returns>Dataset name</returns>
	<remarks>Returns an empty string if unable to determine the dataset name</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineDatasetName(System.String,PHRPReader.clsPHRPReader.ePeptideHitResultType)">
	<summary>
 Auto-determine the dataset name using the input file path and specified PeptideHit result type
 </summary>
	<param name="strFilePath"></param>
	<param name="eResultType"></param>
	<returns>Dataset name</returns>
	<remarks>Returns an empty string if unable to determine the dataset name</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AutoDetermineResultType(System.String)">
	<summary>
 Determine the PeptideHit result type given the input file path
 </summary>
	<param name="strFilePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.GetModSummaryFileName(PHRPReader.clsPHRPReader.ePeptideHitResultType,System.String)">
	<summary>
 Returns the default ModSummary file name for the given PeptideHit result type
 </summary>
	<param name="eResultType"></param>
	<param name="strDatasetName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.AddDynamicAndStaticMods(System.String,System.String@)">
	<summary>
 Look for dynamic mod symbols in the peptide sequence; replace with the corresponding mod masses
 </summary>
	<returns>True if success, false if an error</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.OpenDataFile">
	<summary>
 Opens the data file for reading
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.IsNumber(System.String)">
	<summary>
 Examines the string to determine if it is numeric
 </summary>
	<param name="strData"></param>
	<returns>True if a number, otherwise false</returns>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[]@,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32}@)">
	<summary>
 Returns the string stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The text in the specified column; an empty string if the specific column name is not recognized</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[]@,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32}@,System.String)">
	<summary>
 Returns the string stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The text in the specified column; strValueIfMissing if the specific column name is not recognized</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[]@,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32}@,System.Int32)">
	<summary>
 Returns the value stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.LookupColumnValue(System.String[]@,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Int32}@,System.Double)">
	<summary>
 Returns the value stored in the given named column (using objColumnHeaders to dereference column name with column index)
 </summary>
	<returns>The number in the specified column; 0 if the specific column name is not recognized or the column does not contain a number</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ParseColumnHeaders(System.String[],System.Collections.Generic.SortedDictionary{System.String,System.Int32}@)">
	<summary>
 Updates the column name to column index mapping in objColumnHeaders
 </summary>
	<param name="strColumns">Column names read from the input file</param>
	<param name="objColumnHeaders">Column mapping dictionary object to update</param>
	<remarks>The SortedDictionary object should be instantiated using a case-insensitive comparer, i.e. (StringComparer.CurrentCultureIgnoreCase)</remarks>
</member><member name="M:PHRPReader.clsPHRPReader.MoveNext">
	<summary>
 Reads the next line from a synopsis file or first hits file
 </summary>
	<returns>True if a line was read, false if not more data is available</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPReader.ReadModSummaryFile(System.String,System.Collections.Generic.SortedDictionary{System.String,System.String}@,System.Collections.Generic.SortedDictionary{System.String,System.String}@)">
	<summary>
 Reads the data in strModSummaryFilePath.  Populates objDynamicMods and objStaticMods with the modification definitions
 </summary>
	<param name="strModSummaryFilePath">Path to the PHRP Mod Summary file to read</param>
	<param name="objDynamicMods">List with mod symbols as the key and the corresponding mod mass</param>
	<param name="objStaticMods">List with amino acid names as the key and the corresponding mod mass</param>
	<returns>True if success; false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserXTandem.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<returns>True if success, false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParserSequest.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserSequest.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<returns>True if success, false if an error</returns>
</member><member name="P:PHRPReader.clsMSGFResultsReader.ErrorMessage">
	<summary>
 Error message
 </summary>
</member><member name="M:PHRPReader.clsMSGFResultsReader.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsMSGFResultsReader.ReadMSGFData(System.String)">
	<summary>
 Open a tab-delimited MSGF results file and read the data
 </summary>
	<param name="strInputFilePath">Input file path</param>
	<returns>A Dictionary where keys are ResultID and values are MSGF_SpecProb values (stored as strings)</returns>
</member><member name="M:PHRPReader.clsPHRPParser.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset Name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParser.ParseColumnHeaders(System.String[]@)">
	<summary>
 Parse the column names in strSplitLine and update the local column header mapping
 </summary>
	<param name="strSplitLine"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserInspect.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<returns>True if success, false if an error</returns>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="strDatasetName">Dataset name</param>
	<param name="strInputFilePath">Input file path</param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPHRPParserMSGFDB.ParsePHRPDataLine(System.String,System.Int32,PHRPReader.clsPSM@)">
	<summary>
 Parse the data line read from a PHRP results file
 </summary>
	<param name="strLine">Data line</param>
	<param name="intLinesRead">Number of lines read so far (used for error reporting)</param>
	<param name="objPSM">clsPSM object (output)</param>
	<returns>True if success, false if an error</returns>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.CleavageStateToShort(PHRPReader.clsPeptideCleavageStateCalculator.ePeptideCleavageStateConstants)">
	<summary>
 Converts Cleavage State to 0, 1, or 2
 </summary>
	<param name="eCleavageState"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String)">
	<summary>
 Determines the cleavage state of the specified peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeCleavageState(System.String,System.String,System.String)">
	<summary>
 Determines the cleavage state of the specified peptide
 </summary>
	<param name="strCleanSequence"></param>
	<param name="strPrefixResidues"></param>
	<param name="strSuffixResidues"></param>
	<returns></returns>
	<remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeNumberOfMissedCleavages(System.String)">
	<summary>
 Count the number of missed cleavages in the peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide can have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String)">
	<summary>
 Determine the terminus state of the peptide
 </summary>
	<param name="strSequenceWithPrefixAndSuffix"></param>
	<returns></returns>
	<remarks>Peptide must have prefix and suffix letters, for example K.PEPTIDE.G</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.Char,System.Char)">
	<summary>
 Determine the terminus state given the prefix and suffix characters
 </summary>
	<param name="chPrefix"></param>
	<param name="chSuffix"></param>
	<returns></returns>
	<remarks>For example, if the peptide is -.PEPTIDE.G then pass chPrefix="-" and chSuffix="G"</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ComputeTerminusState(System.String,System.String,System.String)">
	<summary>
 Determine the terminus state of the peptide
 </summary>
	<param name="strCleanSequence"></param>
	<param name="strPrefixResidues"></param>
	<param name="strSuffixResidues"></param>
	<returns></returns>
	<remarks>Peptide cannot have prefix and suffix letters, and thus must be in the form PEPTIDE</remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.ExtractCleanSequenceFromSequenceWithMods(System.String,System.Boolean)">
	<summary>
 Removes all modification symbols (*, #, +, 8, etc.) from the peptide; optionally removes prefix and suffix letters
 </summary>
	<param name="strSequenceWithMods"></param>
	<param name="blnCheckForPrefixAndSuffixResidues"></param>
	<returns>Clean peptide sequence</returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.GetDefaultEnzymeMatchSpec">
	<summary>
 Returns the default enzyme RegEx match specifications
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetEnzymeMatchSpec(System.String,System.String)">
	<summary>
 Define custom enzyme match rules using RegEx strings
 </summary>
	<param name="strLeftResidueRegEx"></param>
	<param name="strRightResidueRegEx"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SetStandardEnzymeMatchSpec(PHRPReader.clsPeptideCleavageStateCalculator.eStandardCleavageAgentConstants)">
	<summary>
 Select a standard enzyme match rule
 </summary>
	<param name="eStandardCleavageAgent"></param>
	<remarks></remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.SplitPrefixAndSuffixFromSequence(System.String,System.String@,System.String@,System.String@)">
	<summary>
 Examines strSequenceIn and splits apart into prefix, primary sequence, and suffix
 </summary>
	<param name="strSequenceIn">Peptide sequence to examine</param>
	<param name="strPrimarySequence">Primary sequence (output)</param>
	<param name="strPrefix">Prefix residue (output)</param>
	<param name="strSuffix">Suffix residue (output)</param>
	<returns> Returns True if success, False if prefix and suffix residues were not found</returns>
	<remarks>If more than one character is present before the first period or after the last period, then all characters are returned
 If the peptide starts with ".." then it is auto-changed to start with "."
 If the peptide ends with ".." then it is auto-changed to end with "."
 </remarks>
</member><member name="M:PHRPReader.clsPeptideCleavageStateCalculator.TestCleavageRule(System.Char,System.Char)">
	<summary>
 Examines the two residues to see if they represent an expected cleavage point
 </summary>
	<param name="chLeftChar"></param>
	<param name="chRightChar"></param>
	<returns>True if the characters match the currently defined cleavage rule</returns>
	<remarks></remarks>
</member>
</members>
</doc>